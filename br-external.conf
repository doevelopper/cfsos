BUILDROOT_GIT_URL       = 	https://github.com/buildroot/buildroot.git
BUILDROOT_VERSION       = 	2023.05
BUILDROOT_SHA256        =   422e17a5851d85c47628ff0cd964318b5c3405cc9b4b3c727d872db7ece6779a
BUILDROOT_LATEST		=
BUILDROOT_EXT           =   br2-cfsos
BUILDROOT_BRANCH		= 	master
BUILDROOT_TAG			= 
BUILDROOT_COMMIT		= 	e7d309cba02df66ebfe0b9ddd46e26458465125d

DEFCONFIG_DIR           =   $(BUILDROOT_EXT)/configs
CFS_OS_VERSION          =   $(shell grep "CFS_OS_VERSION =" $(BUILDROOT_EXT)/package/cfsos/cfsos.mk | cut -d' ' -f3 | cut -d'-' -f1)
# Bump these on release - and please check ISO_VERSION for correctness.
VERSION_MAJOR 			?= 	0
VERSION_MINOR 			?= 	0
VERSION_BUILD 			?= 	1
RAW_VERSION				=	$(VERSION_MAJOR).$(VERSION_MINOR).$(VERSION_BUILD)
VERSION 				?= 	v$(RAW_VERSION)

DATE                    =   $(shell date +%Y%m%d)
TARGET_BOARD            =
PRODUCT_VERSION         =   ${CFS_OS_VERSION}.${DATE}
SUPPORTED_TARGETS       :=  $(sort $(notdir $(patsubst %_defconfig,%,$(wildcard $(DEFCONFIG_DIR)/*_defconfig))))
PWD                     :=  $(shell pwd)
OOSB                    =   $(PWD)/workspace
DL_DIR                  :=  $(if $(BR2_DL_DIR),$(BR2_DL_DIR),$(OOSB/downloads))

BR2_JLEVEL              =   $(shell nproc)
WSPACE                  =   "$(OOSB)/buildroot-$(BUILDROOT_VERSION)"
BR                      =   $(MAKE) -C $(WSPACE)
BR2_CCACHE_DIR			=   "$(OOSB)/.buildroot-ccache"
BUILD_DIR               =   $(OOSB)/artifacts
BRMAKE                  =   $(OOSB)/buildroot-$(BUILDROOT_VERSION)/utils/brmake -C $(OOSB)/buildroot-$(BUILDROOT_VERSION)
BUILDROOT_OPTIONS       =   $(BR) BR2_EXTERNAL=$(PWD)/$(BUILDROOT_EXT) BR2_DL_DIR=$(DL_DIR) BR2_CCACHE_DIR=$(BR2_CCACHE_DIR) BR2_JLEVEL=$(BR2_JLEVEL) 
DEFAULT_DL_DIR 			= 	$(OOSB)/dl
IN_TREE_DL_DIR 			= 	$(PWD)/dl
PROJECT_BR_DL_DIR 		?= 	$(if $(wildcard $(DEFAULT_DL_DIR)), $(DEFAULT_DL_DIR), $(IN_TREE_DL_DIR))

qstrip                  = 	$(strip $(subst ",,$(1)))
MESSAGE                 =   echo "$(shell date +%Y-%m-%dT%H:%M:%S) $(TERM_BOLD)\#\#\#\#\#\#  $(call qstrip,$(1))$(TERM_RESET)\#\#\#\#\#\# "
TERM_BOLD               :=  $(shell tput smso 2>/dev/null)
TERM_RESET              :=  $(shell tput rmso 2>/dev/null)

FULL_OUTPUT             ?= /dev/null


ifneq ($(TARGET_BOARD),)
	SUPPORTED_TARGETS	:=$(TARGET_BOARD)
else
	TARGET_BOARD		:=$(firstword $(SUPPORTED_TARGETS))
endif

PARALLEL_JOBS 			:= $(shell getconf _NPROCESSORS_ONLN 2>/dev/null || echo 1)
ifneq ($(PARALLEL_JOBS),1)
	PARALLEL_OPTS 		= -j$(PARALLEL_JOBS) -Orecurse
else
	PARALLEL_OPTS 		=
endif


# # Get git commit id
COMMIT_NO 				:= $(shell git rev-parse HEAD 2> /dev/null || true)
COMMIT 					?= $(if $(shell git status --porcelain --untracked-files=no),"${COMMIT_NO}-dirty","${COMMIT_NO}")
COMMIT_SHORT 			= $(shell git rev-parse --short HEAD 2> /dev/null || true)
COMMIT_NOQUOTES 		:= $(patsubst "%",%,$(COMMIT))
# # GIT_REPO   				:= https://.git
# GIT_BRANCH 				:= master
# COMMIT0    				:= $(shell git ls-remote $(GIT_REPO) | grep -E 'refs/heads/$(GIT_BRANCH)$$' | cut -f1)
SHORTCOMMIT0 			:= $(shell echo $(COMMIT0)| awk '{ print substr($$0, 1, 7)}')
VERSION 				?=$(shell cat VERSION | cut -d- -f1)
RELEASE 				?=$(shell cat VERSION | cut -d- --complement -f1 | tr -d '-')
# SNAPSHOT 				:= .git$(SHORTCOMMIT0)
VERSION_JSON 			:= "{\"sem_version\": \"$(SEM_VERSION)\", \"linux_version\": \"$(LINUX_VERSION)\", \"PACKAGE_version\": \"$(VERSION)\", \"commit\": \"$(COMMIT_NOQUOTES)\"}"

# config 					:= $(OOSB)/build-$(TARGET_BOARD)/.config
